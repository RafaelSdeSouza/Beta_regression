setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Beta_regression")
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
#Read the already clean dataset
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min")
data.2<-data.1[data.1$redshift==8.86815,]
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
# Prepare data for JAGS
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
X<-model.matrix(~Mstar+Mgas+sfr_gas+baryon_fraction,data=data.2)
# Scale
K<-ncol(Xscale)
jags.data <- list(Y= data.2$Y,
N = nrow(data.2),
X=X,
b0 = rep(0,K),
B0=diag(1e-4,K),
a0 = rep(0,K),
A0=diag(1e-4,K)
)
K<-ncol(X)
jags.data <- list(Y= data.2$Y,
N = nrow(data.2),
X=X,
b0 = rep(0,K),
B0=diag(1e-4,K),
a0 = rep(0,K),
A0=diag(1e-4,K)
)
model<-"model{
#1. Priors
beta~dmnorm(b0[],B0[,])
a~dmnorm(a0[],A0[,])
#theta~dgamma(0.01,0.01)
#2. Likelihood
for(i in 1:N){
Y[i] ~ dbeta(shape1[i],shape2[i])
shape1[i]<-theta[i]*pi[i]
shape2[i]<-theta[i]*(1-pi[i])
logit(pi[i]) <- eta[i]
logit(theta[i])<-eta2[i]
eta[i]<-inprod(beta[],X[i,])
eta2[i]<-inprod(a[],X[i,])
ExpY[i]<-pi[i]
VarY[i]<-pi[i]*(1-pi[i])/(theta[i]+1)
PRes[i]<-(Y[i]-ExpY[i])/sqrt(VarY[i])
#3. Discrepancy measures
newY[i]~dbeta(shape1[i],shape2[i])
PResNew[i]<-(newY[i]-ExpY[i])/sqrt(VarY[i])
D[i]<-pow(PRes[i],2)
DNew[i]<-pow(PResNew[i],2)
}
Fit<-sum(D[1:N])
newFit<-sum(DNew[1:N])
}"
params <- c("beta","theta","PRes","Fit","newFit","newY")
inits0  <- function () {
list(beta  = rnorm(K, 0, 0.01)  #Regression parameters
)  }
inits1=inits0()
inits2=inits0()
inits3=inits0()
library(parallel)
cl <- makeCluster(3)
jags.logit <- run.jags(method="rjparallel",
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=1500,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
model<-"model{
#1. Priors
beta~dmnorm(b0[],B0[,])
theta~dgamma(0.01,0.01)
#2. Likelihood
for(i in 1:N){
Y[i] ~ dbeta(shape1[i],shape2[i])
shape1[i]<-theta*pi[i]
shape2[i]<-theta*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
ExpY[i]<-pi[i]
VarY[i]<-pi[i]*(1-pi[i])/(theta+1)
PRes[i]<-(Y[i]-ExpY[i])/sqrt(VarY[i])
#3. Discrepancy measures
newY[i]~dbeta(shape1[i],shape2[i])
PResNew[i]<-(newY[i]-ExpY[i])/sqrt(VarY[i])
D[i]<-pow(PRes[i],2)
DNew[i]<-pow(PResNew[i],2)
}
Fit<-sum(D[1:N])
newFit<-sum(DNew[1:N])
}"
params <- c("beta","theta","PRes","Fit","newFit","newY")
inits0  <- function () {
list(beta  = rnorm(K, 0, 0.01)  #Regression parameters
)  }
inits1=inits0()
inits2=inits0()
inits3=inits0()
library(parallel)
cl <- makeCluster(3)
jags.logit <- run.jags(method="rjparallel",
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=1500,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
jags.data
jags.logit
jags.data <- list(Y= data.2$Y,
N = nrow(data.2),
X=X,
b0 = rep(0,K),
B0=diag(1e-4,K),
Npred = K
)
model<-"model{
#1. Priors
#beta~dmnorm(b0[],B0[,]) # Normal Priors
# Jefreys priors for sparseness
for(j in 1:Npred)   {
lnTau[j] ~ dunif(-50, 50)
TauM[j] <- exp(lnTau[j])
beta[j] ~ dnorm(0, TauM[j])
Ind[j] <- step(abs(beta[j]) - 0.05)
}
theta~dgamma(0.01,0.01)
#2. Likelihood
for(i in 1:N){
Y[i] ~ dbeta(shape1[i],shape2[i])
shape1[i]<-theta*pi[i]
shape2[i]<-theta*(1-pi[i])
logit(pi[i]) <- eta[i]
eta[i]<-inprod(beta[],X[i,])
ExpY[i]<-pi[i]
VarY[i]<-pi[i]*(1-pi[i])/(theta+1)
PRes[i]<-(Y[i]-ExpY[i])/sqrt(VarY[i])
#3. Discrepancy measures
newY[i]~dbeta(shape1[i],shape2[i])
PResNew[i]<-(newY[i]-ExpY[i])/sqrt(VarY[i])
D[i]<-pow(PRes[i],2)
DNew[i]<-pow(PResNew[i],2)
}
Fit<-sum(D[1:N])
newFit<-sum(DNew[1:N])
}"
params <- c("beta","theta","PRes","Fit","newFit","newY","Ind")
inits0  <- function () {
list(beta  = rnorm(K, 0, 0.01)  #Regression parameters
)  }
inits1=inits0()
inits2=inits0()
inits3=inits0()
library(parallel)
cl <- makeCluster(3)
jags.logit <- run.jags(method="rjparallel",
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=1500,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
jags.logit
jagssamples <- as.mcmc.list(jags.logit)
L.factors <- data.frame(
Parameter=paste("beta[", seq(1:5), "]", sep=""),
Label=c("(Intercept)","Mstar","Mgas","sfr_gas","baryon_fraction"))
beta_post<-ggs(jagssamples,par_labels=L.factors,family=c("beta"))
ggs_caterpillar(beta_post)+theme_hc()+ylab("")+geom_vline(xintercept=c(0,0), linetype="dotted")+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))
summary<-extend.jags(jags.logit,drop.monitor=c("PRes","Fit","newFit","newY"), summarise=TRUE)
print(summary)
dim()
dim(data.2)
dim(data.1)
80/24
jags.ready <- jagam(count~s(x, y),
data=all.data,
family="poisson",
file="jagam.bug")
library(mgcv)
jags.ready <- jagam(count~s(x),
data=all.data,
family="poisson",
file="jagam.bug")
library(mgcv)
jags.ready <- jagam(count~s(x),
data=all.data,
family="poisson",
file="jagam.bug")
library(R2jags)
jagam(count~s(x),
data=all.data,
family="poisson",
file="jagam.bug")
library("mgcv", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
require(mgcv)
n <- 15
x <- runif(n)
y <- sin(x*2*pi) + rnorm(n)*.2
mod <- gam(y~s(x,bs="cc",k=6),knots=list(x=seq(0,1,length=6)))
model.matrix(mod)
require(mgcv)
set.seed(2) ## simulate some data...
n <- 400
dat <- gamSim(1,n=n,dist="normal",scale=2)
## regular gam fit for comparison...
b0 <- gam(y~s(x0)+s(x1) + s(x2)+s(x3),data=dat,method="REML")
jd <- jagam(y~s(x0)+s(x1)+s(x2)+s(x3),data=dat,file="test.jags",
sp.prior="gamma",diagonalize=TRUE)
Age<-runif(50,20,70)
Age
Age<-round(runif(50,20,70))
Age
rnorm(50,13.5,10)
rnorm(50,13.5,5)
rnorm(50,13.5,1)
income<-rnorm(50,13.5,1)
covariate<-round(runif(50,20,70))response<-rnorm(50,13.5,1)
round(runif(50,20,70))
covariate<-round(runif(50,20,70))
response<-rnorm(50,13.5,1)
response[]
for(i in 1:15){knot[i]<-k/(15+1)}
for(i in 1:15){  knot[i]<-k/(15+1)}
for(i in 1:15){
knot[i]<-k/(15+1)
}
for(i in 1:15){  knot[i]<-i/(15+1)}
for(i in 1:15){
knot[i]<-i/(15+1)
}
knot<-c()for(i in 1:15){  knot[i]<-i/(15+1)}
for(i in 1:15){  knot[i]<-i/(15+1)}
for(i in 1:15){
knot[i]<-i/(15+1)
}
knot<-c()
for(i in 1:15){
knot[i]<-i/(15+1)
}
knot
quantiles(covariate,knot)
quantile(covariate,knot)
nos<-quantile(covariate,knot)
list(n=205,nknots=15,degree=2,     knot=nos)
list(n=205,nknots=15,degree=2,knot=nos)
params <- c("beta","ystar","b")
jags.data <-list(n=205,nknots=15,degree=2,knot=nos)
library(rjags)library(ggmcmc)library(ggplot2)library(ggthemes)library(pander)library(Cairo)library(plyr)library(MASS)library(scales)library(plyr)require(gdata)require(runjags)require(gdata)
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)library(plyr)library(MASS)library(scales)
library(Cairo)
library(plyr)
library(MASS)
library(scales
)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
model<-"model{ #Begin model  #This model can be used for any simple scatterplot smoothing. It  #can be easily modified to accommodate other covariates and/or  #random effects  #Likelihood of the model  for (i in 1:n)  {response[i]~dnorm(m[i],taueps)    m[i]<-inprod(beta[],X[i,])+inprod(b[],Z[i,])}  #Prior distributions of the random effects parameters  for (k in 1:nknots){b[k]~dnorm(0,taub)}  #Prior distribution of the fixed effects parameters  for (l in 1:degree+1){beta[l]~dnorm(0,1.0E-6)}  #Prior distributions of the precision parameters  taueps~dgamma(1.0E-3,1.0E-3); taub~dgamma(1.0E-3,1.0E-3)  #Construct the design matrix of fixed effects  for (i in 1:n)  {for (l in 1:degree+1){X[i,l]<-pow(covariate[i],l-1)}}  #Construct the design matrix of random effects  for (i in 1:n)  {for (k in 1:nknots)  {u[i,k]<-(covariate[i]-knot[k])*step(covariate[i]-knot[k])  Z[i,k]<-pow(u[i,k],degree)}}  #Deterministic transformations. Obtain the standard deviations and  #the smoothing parameter  sigmaeps<-1/sqrt(taueps);sigmab<-1/sqrt(taub)  lambda<-pow(sigmab,2)/pow(sigmaeps,2)  #Predicting new observations  for (i in 1:n)  {epsilonstar[i]~dnorm(0,taueps)    ystar[i]<-m[i]+epsilonstar[i]}}"
jags.data <-list(n=nrow(covariate),nknots=15,degree=2,knot=nos)
model<-"model{ #Begin model  #This model can be used for any simple scatterplot smoothing. It  #can be easily modified to accommodate other covariates and/or  #random effects  #Likelihood of the model  for (i in 1:n)  {response[i]~dnorm(m[i],taueps)    m[i]<-inprod(beta[],X[i,])+inprod(b[],Z[i,])}  #Prior distributions of the random effects parameters  for (k in 1:nknots){b[k]~dnorm(0,taub)}  #Prior distribution of the fixed effects parameters  for (l in 1:degree+1){beta[l]~dnorm(0,1.0E-6)}  #Prior distributions of the precision parameters  taueps~dgamma(1.0E-3,1.0E-3); taub~dgamma(1.0E-3,1.0E-3)  #Construct the design matrix of fixed effects  for (i in 1:n)  {for (l in 1:degree+1){X[i,l]<-pow(covariate[i],l-1)}}  #Construct the design matrix of random effects  for (i in 1:n)  {for (k in 1:nknots)  {u[i,k]<-(covariate[i]-knot[k])*step(covariate[i]-knot[k])  Z[i,k]<-pow(u[i,k],degree)}}  #Deterministic transformations. Obtain the standard deviations and  #the smoothing parameter  sigmaeps<-1/sqrt(taueps);sigmab<-1/sqrt(taub)  lambda<-pow(sigmab,2)/pow(sigmaeps,2)  #Predicting new observations  for (i in 1:n)  {epsilonstar[i]~dnorm(0,taueps)    ystar[i]<-m[i]+epsilonstar[i]}}"
require(gdata)
library(rjags)library(ggmcmc)library(ggplot2)library(ggthemes)library(pander)library(Cairo)library(plyr)library(MASS)library(scales)library(plyr)require(gdata)require(runjags)require(gdata)
params <- c("beta","ystar","b")inits0  <- function () {  list(beta  = rnorm(K, 0, 0.01),       b = rnorm(K, 0, 0.01),#Regression parameters         )  }inits1=inits0()inits2=inits0()inits3=inits0()library(parallel)cl <- makeCluster(3)jags.logit <- run.jags(method="rjparallel",                        data = jags.data,                        inits = list(inits1,inits2,inits3),                       model=model,                       n.chains = 3,                       adapt=1500,                       monitor=c(params),                       burnin=1000,                       sample=5000,                       summarise=FALSE,                       plots=FALSE)
params <- c("beta","ystar","b")
inits0  <- function () {  list(beta  = rnorm(K, 0, 0.01),       b = rnorm(K, 0, 0.01),#Regression parameters         )  }
model<-"model{ #Begin model#This model can be used for any simple scatterplot smoothing. It#can be easily modified to accommodate other covariates and/or#random effects#Likelihood of the modelfor (i in 1:n){response[i]~dnorm(m[i],taueps)m[i]<-inprod(beta[],X[i,])+inprod(b[],Z[i,])}#Prior distributions of the random effects parametersfor (k in 1:nknots){b[k]~dnorm(0,taub)}#Prior distribution of the fixed effects parametersfor (l in 1:degree+1){beta[l]~dnorm(0,1.0E-6)}#Prior distributions of the precision parameterstaueps~dgamma(1.0E-3,1.0E-3); taub~dgamma(1.0E-3,1.0E-3)#Construct the design matrix of fixed effectsfor (i in 1:n){for (l in 1:degree+1){X[i,l]<-pow(covariate[i],l-1)}}#Construct the design matrix of random effectsfor (i in 1:n){for (k in 1:nknots){u[i,k]<-(covariate[i]-knot[k])*step(covariate[i]-knot[k])Z[i,k]<-pow(u[i,k],degree)}}#Deterministic transformations. Obtain the standard deviations and#the smoothing parametersigmaeps<-1/sqrt(taueps);sigmab<-1/sqrt(taub)lambda<-pow(sigmab,2)/pow(sigmaeps,2)#Predicting new observationsfor (i in 1:n){epsilonstar[i]~dnorm(0,taueps)ystar[i]<-m[i]+epsilonstar[i]}}"
library(rjags)library(ggmcmc)library(ggplot2)library(ggthemes)library(pander)library(Cairo)library(plyr)library(MASS)library(scales)library(plyr)require(gdata)require(runjags)require(gdata)covariate<-round(runif(50,20,70))response<-rnorm(50,13.5,1)knot0<-c()for(i in 1:15){  knot0[i]<-i/(15+1)}nos<-quantile(covariate,knot0)jags.data <-list(n=nrow(covariate),nknots=15,degree=2,knot=nos)model<-"model{ #Begin model#This model can be used for any simple scatterplot smoothing. It#can be easily modified to accommodate other covariates and/or#random effects#Likelihood of the modelfor (i in 1:n){response[i]~dnorm(m[i],taueps)m[i]<-inprod(beta[],X[i,])+inprod(b[],Z[i,])}#Prior distributions of the random effects parametersfor (k in 1:nknots){b[k]~dnorm(0,taub)}#Prior distribution of the fixed effects parametersfor (l in 1:degree+1){beta[l]~dnorm(0,1.0E-6)}#Prior distributions of the precision parameterstaueps~dgamma(1.0E-3,1.0E-3); taub~dgamma(1.0E-3,1.0E-3)#Construct the design matrix of fixed effectsfor (i in 1:n){for (l in 1:degree+1){X[i,l]<-pow(covariate[i],l-1)}}#Construct the design matrix of random effectsfor (i in 1:n){for (k in 1:nknots){u[i,k]<-(covariate[i]-knot[k])*step(covariate[i]-knot[k])Z[i,k]<-pow(u[i,k],degree)}}#Deterministic transformations. Obtain the standard deviations and#the smoothing parametersigmaeps<-1/sqrt(taueps);sigmab<-1/sqrt(taub)lambda<-pow(sigmab,2)/pow(sigmaeps,2)#Predicting new observationsfor (i in 1:n){epsilonstar[i]~dnorm(0,taueps)ystar[i]<-m[i]+epsilonstar[i]}}"params <- c("beta","ystar","b")inits0  <- function () {  list(beta  = rnorm(K, 0, 0.01),       b = rnorm(K, 0, 0.01),#Regression parameters         )  }inits1=inits0()inits2=inits0()inits3=inits0()library(parallel)cl <- makeCluster(3)jags.logit <- run.jags(method="rjparallel",                        data = jags.data,                        inits = list(inits1,inits2,inits3),                       model=model,                       n.chains = 3,                       adapt=1500,                       monitor=c(params),                       burnin=1000,                       sample=5000,                       summarise=FALSE,                       plots=FALSE)
library(rjags)library(ggmcmc)library(ggplot2)library(ggthemes)library(pander)library(Cairo)library(plyr)library(MASS)library(scales)library(plyr)require(gdata)require(runjags)require(gdata)covariate<-round(runif(50,20,70))response<-rnorm(50,13.5,1)knot<-c()for(i in 1:15){  knot[i]<-i/(15+1)}nos<-quantile(covariate,knot)jags.data <-list(n=nrow(covariate),nknots=15,degree=2,knot=nos)model<-"model{ #Begin model#This model can be used for any simple scatterplot smoothing. It#can be easily modified to accommodate other covariates and/or#random effects#Likelihood of the modelfor (i in 1:n){response[i]~dnorm(m[i],taueps)m[i]<-inprod(beta[],X[i,])+inprod(b[],Z[i,])}#Prior distributions of the random effects parametersfor (k in 1:nknots){b[k]~dnorm(0,taub)}#Prior distribution of the fixed effects parametersfor (l in 1:degree+1){beta[l]~dnorm(0,1.0E-6)}#Prior distributions of the precision parameterstaueps~dgamma(1.0E-3,1.0E-3); taub~dgamma(1.0E-3,1.0E-3)#Construct the design matrix of fixed effectsfor (i in 1:n){for (l in 1:degree+1){X[i,l]<-pow(covariate[i],l-1)}}#Construct the design matrix of random effectsfor (i in 1:n){for (k in 1:nknots){u[i,k]<-(covariate[i]-knot[k])*step(covariate[i]-knot[k])Z[i,k]<-pow(u[i,k],degree)}}#Deterministic transformations. Obtain the standard deviations and#the smoothing parametersigmaeps<-1/sqrt(taueps);sigmab<-1/sqrt(taub)lambda<-pow(sigmab,2)/pow(sigmaeps,2)#Predicting new observationsfor (i in 1:n){epsilonstar[i]~dnorm(0,taueps)ystar[i]<-m[i]+epsilonstar[i]}}"params <- c("beta","ystar","b")inits0  <- function () {  list(beta  = rnorm(K, 0, 0.01),       b = rnorm(K, 0, 0.01),#Regression parameters         )  }inits1=inits0()inits2=inits0()inits3=inits0()library(parallel)cl <- makeCluster(3)jags.logit <- run.jags(method="rjparallel",                        data = jags.data,                        inits = list(inits1,inits2,inits3),                       model=model,                       n.chains = 3,                       adapt=1500,                       monitor=c(params),                       burnin=1000,                       sample=5000,                       summarise=FALSE,                       plots=FALSE)
library(rjags)library(ggmcmc)library(ggplot2)library(ggthemes)library(pander)library(Cairo)library(plyr)library(MASS)library(scales)library(plyr)library(runjags)
library(rjags)
model<-"model{ #Begin model##Likelihood of the modelfor (i in 1:n){response[i]~dnorm(m[i],taueps)m[i]<-inprod(beta[],X[i,])+inprod(b[],Z[i,])}#Prior distributions of the random effects parametersfor (k in 1:nknots){b[k]~dnorm(0,taub)}#Prior distribution of the fixed effects parametersfor (l in 1:degree+1){beta[l]~dnorm(0,1.0E-6)}#Prior distributions of the precision parameterstaueps~dgamma(1.0E-3,1.0E-3); taub~dgamma(1.0E-3,1.0E-3)#Construct the design matrix of fixed effectsfor (i in 1:n){for (l in 1:degree+1){X[i,l]<-pow(covariate[i],l-1)}}#Construct the design matrix of random effectsfor (i in 1:n){for (k in 1:nknots){u[i,k]<-(covariate[i]-knot[k])*step(covariate[i]-knot[k])Z[i,k]<-pow(u[i,k],degree)}}#Deterministic transformations. Obtain the standard deviations and#the smoothing parametersigmaeps<-1/sqrt(taueps);sigmab<-1/sqrt(taub)lambda<-pow(sigmab,2)/pow(sigmaeps,2)#Predicting new observationsfor (i in 1:n){epsilonstar[i]~dnorm(0,taueps)ystar[i]<-m[i]+epsilonstar[i]}}"params<-c("beta","ystar","b")
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
covariate<-round(runif(50,20,70))
response<-rnorm(50,13.5,1)
knot0<-c()
for(i in 1:15){
knot0[i]<-i/(15+1)
}
nos<-quantile(covariate,knot0)
jags.data <-list(n=nrow(covariate),nknots=15,degree=2,knot=nos)
model<-"model{
#Begin model
#
#Likelihood of the model
for (i in 1:n)
{response[i]~dnorm(m[i],taueps)
m[i]<-inprod(beta[],X[i,])+inprod(b[],Z[i,])}
#Prior distributions of the random effects parameters
for (k in 1:nknots){b[k]~dnorm(0,taub)}
#Prior distribution of the fixed effects parameters
for (l in 1:degree+1){beta[l]~dnorm(0,1.0E-6)}
#Prior distributions of the precision parameters
taueps~dgamma(1.0E-3,1.0E-3); taub~dgamma(1.0E-3,1.0E-3)
#Construct the design matrix of fixed effects
for (i in 1:n)
{for (l in 1:degree+1){X[i,l]<-pow(covariate[i],l-1)}}
#Construct the design matrix of random effects
for (i in 1:n)
{for (k in 1:nknots)
{u[i,k]<-(covariate[i]-knot[k])*step(covariate[i]-knot[k])
Z[i,k]<-pow(u[i,k],degree)}}
#Deterministic transformations. Obtain the standard deviations and
#the smoothing parameter
sigmaeps<-1/sqrt(taueps);sigmab<-1/sqrt(taub)
lambda<-pow(sigmab,2)/pow(sigmaeps,2)
#Predicting new observations
for (i in 1:n)
{epsilonstar[i]~dnorm(0,taueps)
ystar[i]<-m[i]+epsilonstar[i]}
}"
params<-c("beta","ystar","b")
inits0  <- function () {
list(beta  = rnorm(K, 0, 0.01),
b = rnorm(K, 0, 0.01)
)  }
inits1=inits0()
inits2=inits0()
inits3=inits0()
library(parallel)
cl <- makeCluster(3)
jags.logit <- run.jags(method="rjparallel",
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=1500,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
inits0  <- function () {
list(beta  = rnorm(1, 0, 0.01),
b = rnorm(1, 0, 0.01)
)  }
inits1=inits0()
inits2=inits0()
inits3=inits0()
library(parallel)
cl <- makeCluster(3)
jags.logit <- run.jags(method="rjparallel",
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=1500,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
nrow(covariate)
covariate
nrow(covariate)
jags.data <-list(n=50,nknots=15,degree=2,knot=nos)
model<-"model{
#Begin model
#
#Likelihood of the model
for (i in 1:n)
{response[i]~dnorm(m[i],taueps)
m[i]<-inprod(beta[],X[i,])+inprod(b[],Z[i,])}
#Prior distributions of the random effects parameters
for (k in 1:nknots){b[k]~dnorm(0,taub)}
#Prior distribution of the fixed effects parameters
for (l in 1:degree+1){beta[l]~dnorm(0,1.0E-6)}
#Prior distributions of the precision parameters
taueps~dgamma(1.0E-3,1.0E-3); taub~dgamma(1.0E-3,1.0E-3)
#Construct the design matrix of fixed effects
for (i in 1:n)
{for (l in 1:degree+1){X[i,l]<-pow(covariate[i],l-1)}}
#Construct the design matrix of random effects
for (i in 1:n)
{for (k in 1:nknots)
{u[i,k]<-(covariate[i]-knot[k])*step(covariate[i]-knot[k])
Z[i,k]<-pow(u[i,k],degree)}}
#Deterministic transformations. Obtain the standard deviations and
#the smoothing parameter
sigmaeps<-1/sqrt(taueps);sigmab<-1/sqrt(taub)
lambda<-pow(sigmab,2)/pow(sigmaeps,2)
#Predicting new observations
for (i in 1:n)
{epsilonstar[i]~dnorm(0,taueps)
ystar[i]<-m[i]+epsilonstar[i]}
}"
params<-c("beta","ystar","b")
inits0  <- function () {
list(beta  = rnorm(1, 0, 0.01),
b = rnorm(1, 0, 0.01)
)  }
inits1=inits0()
inits2=inits0()
inits3=inits0()
library(parallel)
cl <- makeCluster(3)
jags.logit <- run.jags(method="rjparallel",
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model,
n.chains = 3,
adapt=1500,
monitor=c(params),
burnin=1000,
sample=5000,
summarise=FALSE,
plots=FALSE
)
