n <- 2
N <- length(meanPred)
zMax <- max(unlist(sapply(plotData, "[[", "z")))*1.5
mat <- persp(xlim, ylim, matrix(0, n, n), main=main,
zlim=c(0, zMax), theta=-30,
ticktype="detailed",box=FALSE)
C <- trans3d(x, UpPred, rep(0, N),mat)
lines(C, lty=2)
C <- trans3d(x, LwPred, rep(0, N), mat)
lines(C, lty=2)
C <- trans3d(c(x, rev(x)), c(UpPred, rev(LwPred)),
rep(0, 2*N), mat)
polygon(C, border=NA, col=adjustcolor("gray90", alpha.f = 0.5))
C <- trans3d(x, meanPred, rep(0, N), mat)
lines(C, lwd=2, col="grey")
C <- trans3d(x, y, rep(0,N), mat)
points(C, lwd=2, col="#00526D")
for(j in N:1){
xp <- plotData[[j]]$x
yp <- plotData[[j]]$y
z0 <- plotData[[j]]$z0
zp <- plotData[[j]]$z
C <- trans3d(c(xp, xp), c(yp, rev(yp)), c(zp, z0), mat)
polygon(C, border=NA, col="gray95", density=40)
C <- trans3d(xp, yp, z0, mat)
lines(C, lty=2)
C <- trans3d(xp, yp, zp, mat)
lines(C, col=adjustcolor("blue", alpha.f = 0.5))
}
market.size <- 800
icecream$opportunity <- market.size - icecream$units
xlim <- c(min(icecream$temp)*0.95, max(icecream$temp)*1.05)
ylim <- c(floor(min(icecream$units)*0.95),
ceiling(max(icecream$units)*1.05))
bin.glm <- glm(cbind(units, opportunity) ~ temp, data=icecream,
family=binomial(link = "logit"))
par(mfrow=c(2,2))
plot(bin.glm)
title(outer=TRUE, line = -1,
main = list("Binomial (logit) GLM",
cex=1.25,col="black", font=2))
meanProb <- predict(bin.glm, type="response")
meanPred <- meanProb*market.size
UpPred <- qbinom(.95, market.size, meanProb)
LwPred <- qbinom(.05, market.size, meanProb)
plotData <- lapply(
seq(along=icecream$temp),
function(i){
y = ylim[1]:ylim[2]
x = rep(icecream$temp[i], length(y))
z0 = rep(0, length(y))
z = dbinom(y, market.size, meanProb[i])
return(list(x=x, y=y, z0=z0, z=z))
}
)
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData,
main = "Binomial (logit) GLM")
glmModelPlot <- function(x, y, xlim,ylim, meanPred,  LwPred, UpPred,
plotData, main=NULL){
## Based on code by Arthur Charpentier:
## http://freakonometrics.hypotheses.org/9593
par(mfrow=c(1,1))
n <- 2
N <- length(meanPred)
zMax <- max(unlist(sapply(plotData, "[[", "z")))*1.5
mat <- persp(xlim, ylim, matrix(0, n, n), main=main,
zlim=c(0, zMax), theta=-30,
ticktype="detailed",box=FALSE)
C <- trans3d(x, UpPred, rep(0, N),mat)
lines(C, lty=2)
C <- trans3d(x, LwPred, rep(0, N), mat)
lines(C, lty=2)
C <- trans3d(c(x, rev(x)), c(UpPred, rev(LwPred)),
rep(0, 2*N), mat)
polygon(C, border=NA, col=adjustcolor("gray90", alpha.f = 0.5))
C <- trans3d(x, meanPred, rep(0, N), mat)
lines(C, lwd=2, col="grey")
C <- trans3d(x, y, rep(0,N), mat)
points(C, lwd=2, col="#00526D")
for(j in N:1){
xp <- plotData[[j]]$x
yp <- plotData[[j]]$y
z0 <- plotData[[j]]$z0
zp <- plotData[[j]]$z
C <- trans3d(c(xp, xp), c(yp, rev(yp)), c(zp, z0), mat)
polygon(C, border=NA, col="gray95", density=40)
C <- trans3d(xp, yp, z0, mat)
lines(C, lty=2)
C <- trans3d(xp, yp, zp, mat)
lines(C, col=adjustcolor("black", alpha.f = 0.5))
}
market.size <- 800
icecream$opportunity <- market.size - icecream$units
xlim <- c(min(icecream$temp)*0.95, max(icecream$temp)*1.05)
ylim <- c(floor(min(icecream$units)*0.95),
ceiling(max(icecream$units)*1.05))
bin.glm <- glm(cbind(units, opportunity) ~ temp, data=icecream,
family=binomial(link = "logit"))
par(mfrow=c(2,2))
plot(bin.glm)
title(outer=TRUE, line = -1,
main = list("Binomial (logit) GLM",
cex=1.25,col="black", font=2))
meanProb <- predict(bin.glm, type="response")
meanPred <- meanProb*market.size
UpPred <- qbinom(.95, market.size, meanProb)
LwPred <- qbinom(.05, market.size, meanProb)
plotData <- lapply(
seq(along=icecream$temp),
function(i){
y = ylim[1]:ylim[2]
x = rep(icecream$temp[i], length(y))
z0 = rep(0, length(y))
z = dbinom(y, market.size, meanProb[i])
return(list(x=x, y=y, z0=z0, z=z))
}
)
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData,
main = "Binomial (logit) GLM")
10^(0.15)
10^(0.51)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/bayesian_book/Gaussian/scripts")
#Linear Model in R
# Fitting M-sigma relation with lm function in R.
# Read data
data<-read.csv("..//data/M_sigma.csv",header = T,sep="")
# Prepare data
Msigma<-data.frame(x=log(data$sig_e/200,10),y=data$MBH)
Msigma2<-na.omit(Msigma) # remove NAs
Msigma2<-Msigma2[Msigma2$y>0,] # remove data with MBH=0
# Fit models
mod1<-lm(y~x,data=Msigma2)
summary(mod)
plot(mod)
confint(mod)
summary(mod1)
plot(mod1)
confint(mod1)
# JAGS Normal Model with errors
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
# Read data
data<-read.csv("..//data/M_sigma.csv",header = T,sep="")
# Prepare data
Msigma<-data.frame(x=log(data$sig_e/200,10),y=data$MBH)
Msigma2<-na.omit(Msigma) # remove NAs
Msigma2<-Msigma2[Msigma2$y>0,] # remove data with MBH=0
# Prepare data to JAGS
jags.data <- list(
x = Msigma2$x,
y = Msigma2$y,
N = nrow(Msigma2)
)
# Normal Model
model.normal<-"model{
#Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dt(0,1,1)
tau~dgamma(1e-3,1e-3)
scat<-1/sqrt(tau)
# Likelihood function
for (i in 1:N){
mu[i]<-beta.0+beta.1*x[i]
y[i]~dnorm(mu[i],tau)
#
# Prediction
prediction[i]~dnorm(mu[i],tau)
}
}"
#inits<-list(beta.0=coefficients(glm.pois)[1],beta.1=coefficients(glm.pois)[2])
inits<-list(beta.0=0,beta.1=0)
params<-c("beta.0","beta.1","scat")
jags.normal<-jags.model(
data = jags.data,
inits = inits,
textConnection(model.normal),
n.chains = 3,
n.adapt=1000
)
update(jags.normal, 20000)
posterior.normal <- coda.samples(jags.normal, params, n.iter = 50000)
G1<-ggs(posterior.normal)
ggs_density(G1)+theme_fivethirtyeight()
ggs_density(G1)+theme_pander()
ggs_density(G1)+theme_few()
ggs_caterpillar(G1)+theme_few()
ggs_caterpillar(G1)+theme_hc()
ggs_caterpillar(G1)+theme_economist_white()
ggs_caterpillar(G1)+theme_economist()
ggs_caterpillar(G1)+theme_stata()
ggs_caterpillar(G1)+theme_few()
ggs_caterpillar(G1)+theme_wsj()
ggs_caterpillar(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))
read.csv("..//data/M_sigma.csv",header = T,sep="")
read.csv("..//..//data/M_sigma.csv",header = T,sep="")
ggs_caterpillar(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))
ggs_caterpillar(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_economist()
ggs_caterpillar(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_stata()
ggs_histogram(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_stata()
ggs_density(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_stata()
ggs_traceplot(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_stata()
jags.normal<-jags.model(
data = jags.data,
inits = inits,
textConnection(model.normal),
n.chains = 3,
n.adapt=1000
)
update(jags.normal, 5000)
posterior.normal <- coda.samples(jags.normal, params, n.iter = 20000)
G1<-ggs(posterior.normal)
ggs_traceplot(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=25),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_stata()
ggs_traceplot(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=20),
axis.text.x=element_text(size=20),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_stata()
ggs_traceplot(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=18),
axis.text.y=element_text(size=18),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_stata()
ggs_traceplot(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=18),
axis.text.y=element_text(size=18),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_gdocs()
ggs_traceplot(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=18),
axis.text.y=element_text(size=18),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_fivethirtyeight()
install.packages(c("pander", "visreg"))
install.packages(c("abc", "arm", "BayesFactor", "BayesLCA", "BDgraph", "biomod2", "bipartite", "caret", "codetools", "d3Network", "devtools", "fastcluster", "fclust", "fdrtool", "fields", "flexmix", "foreign", "gam", "gbm", "geoR", "geoRglm", "gplots", "gtools", "intergraph", "KernSmooth", "kohonen", "mnormt", "NbClust", "networkD3", "pander", "qgraph", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppGSL", "RCurl", "RgoogleMaps", "rjags", "rmarkdown", "roxygen2", "rstudioapi", "runjags", "sp", "spam", "survival", "sysfonts", "TH.data", "tikzDevice", "vegan", "VGAM", "WriteXLS"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c("abc", "arm", "BayesFactor", "BayesLCA", "BDgraph",
install.packages("pander", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
)
l
qplot(carat, price, data=dsamp, colour=cut)
+ theme_stata()
+ scale_colour_stata()
+ ggtitle("Plot Title")
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
# Read data
qplot(carat, price, data=dsamp, colour=cut)
+ theme_stata()
+ scale_colour_stata()
+ ggtitle("Plot Title")
qplot(months, temp, data=dtemp, group=city, color=city, geom="line") +
geom_point(size=1.1) +
theme_hc(bgcolor = "darkunica") +
scale_fill_hc("darkunica")
qplot(carat, price, data = dsamp, colour = cut)
+ theme_hc()
+ scale_colour_hc()
qplot(carat, price, data = dsamp, colour = cut)
+theme_hc()+scale_colour_hc()
qplot(carat, price, data = dsamp, colour = cut)+theme_hc()+scale_colour_hc()
qplot(carat, price, data = diamonds, colour = cut)+theme_hc()+scale_colour_hc()
qplot(carat, price, data = diamonds[1:100,], colour = cut)+theme_hc()+scale_colour_hc()
qplot(carat, price, data = diamonds[1:1000,], colour = cut)+theme_hc()+scale_colour_hc()
qplot(carat, price, data = diamonds, colour = cut)+theme_hc()+scale_colour_hc()
qplot(carat, price, data = diamonds, colour = cut)+theme_few()+scale_colour_hc()
qplot(carat, price, data = diamonds, colour = cut)+theme_few()+scale_colour_stata()
qplot(carat, price, data = diamonds, colour=clarity)+theme_few()+scale_colour_stata()
qplot(carat, price, data = diamonds[sample(nrow(diamonds), 1000), ], colour=clarity)+theme_few()+scale_colour_stata()
qplot(carat, price, data = diamonds[sample(nrow(diamonds), 1000), ], colour=clarity)+theme_few()+scale_colour_fivethirtyeight()
ggs_density(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=18),
axis.text.y=element_text(size=18),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_fivethirtyeight()
ggs_density(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=18),
axis.text.y=element_text(size=18),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_few()
ggs_density(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=18),
axis.text.y=element_text(size=18),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))
ggs_density(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=18),
axis.text.y=element_text(size=18),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_economist()
ggs_autocorrelation(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=18),
axis.text.y=element_text(size=18),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_economist()
ggs_autocorrelation(G1)+theme_few()+
theme(legend.position="none",plot.title = element_text(hjust=0.5),
axis.title.y=element_text(vjust=0.75),axis.text.x=element_text(size=18),
axis.text.y=element_text(size=18),
strip.text.x=element_text(size=25),
axis.title.x=element_text(vjust=-0.25),
text = element_text(size=20),axis.title.x=element_text(size=rel(1)))+
scale_colour_economist()+scale_fill_economist()
require(ggplot2)
#to get ggthemes from jrnold github if you have not installed
#require(devtools)
#install_github("ggthemes","jrnold")
require(ggthemes)
require(reshape2)
require(directlabels)
require(quantmod)
require(PerformanceAnalytics)
tckrs <- c("CSCO","MSFT","AAPL","^GSPC")
getSymbols(tckrs,from="1990-01-01")
prices <- na.omit(merge(CSCO[,6],MSFT[,6],AAPL[,6],GSPC[,6]))
colnames(prices) <- c("Cisco","Microsoft","Apple","SP500")
returns <- prices/lag(prices) - 1
returns[1,] <- 0
cumul <- cumprod(returns+1)
cumul.df <- as.data.frame(cbind(index(cumul),coredata(cumul)))
cumul.melt <- melt(cumul.df,id.vars=1)
colnames(cumul.melt) <- c("Date","Stock","Cumul")
cumul.melt[,"Date"] <- as.Date(cumul.melt[,"Date"])
direct.label(
ggplot(cumul.melt, aes(x=Date,y=log(Cumul),colour=Stock)) +
geom_line() +
theme_economist() +  #if you want to play try theme_wsj() or theme_few()
scale_colour_economist() +
ggtitle("Apple Compared to Others Since 1990")
, list(last.bumpup,hjust=0.45,cex=0.65))
direct.label(
ggplot(cumul.melt, aes(x=Date,y=log(Cumul),colour=Stock)) +
geom_line() +
theme_economist_white() +  #if you want to play try theme_wsj() or theme_few()
scale_colour_economist() +
ggtitle("Apple Compared to Others Since 1990")
, list(last.bumpup,hjust=0.45,cex=0.65))
#for reference I will use my old favorite theEconomist from latticeExtra
require(latticeExtra)
direct.label(
asTheEconomist(xyplot(log(Cumul)~Date,data=cumul.melt,groups=Stock,
main="Apple Compared to Microsoft and Cisco Since 1990")
)
, list(last.bumpup,hjust=0.25,cex=1))
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Beta_regression")
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
require(caret)
require(pROC)
require(plyr)
require(LOGIT)
require(usdm)
library(lme4)
library(nlme)
library(arm)
require(gam)
require(glmnet)
require(AMADA)
#Read the  dataset
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
#trainIndex <- createDataPartition(data.1$redshift, p = .25,
#                                  list = FALSE,
#                                  times = 1)
data.2<-data.1[data.1$redshift<=20,]
data.2<-data.1[data.1$redshift<=15,]
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.5]<-1
data.2$Y[data.2$Y<0.5]<-0
#data.2$Y<-as.factor(data.2$Y)
# Prepare data
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$ssfr_stars<-(data.2$ssfr_stars-mean(data.2$ssfr_stars))/sd(data.2$ssfr_stars)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
data.2$sfr_stars<-(data.2$sfr_stars-mean(data.2$sfr_stars))/sd(data.2$sfr_stars)
data.2$age_star_max<-(data.2$age_star_max-mean(data.2$age_star_max))/sd(data.2$age_star_max)
data.2$age_star_min<-(data.2$age_star_min-mean(data.2$age_star_min))/sd(data.2$age_star_min)
x2<-as.matrix(data.2[,c("Mstar","Mgas","ssfr_gas","ssfr_stars","baryon_fraction","spin","age_star_max","age_star_min","NH_10")])
fit<-glmnet(x2,y=data.2$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
cv.glmmod <- cv.glmnet(x2,y=data.2$Y,alpha=1,family="binomial",type.measure = "auc")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
formula2 = Y~Mstar+Mgas+ssfr_gas+ssfr_stars+baryon_fraction+spin+age_star_max+age_star_min+NH_10
mod.2 = inla(formula2,data=data.2[,c(-1,-2)],family="binomial")
require(INLA)
formula2 = Y~Mstar+Mgas+ssfr_gas+ssfr_stars+baryon_fraction+spin+age_star_max+age_star_min+NH_10
mod.2 = inla(formula2,data=data.2[,c(-1,-2)],family="binomial")
plot(mod.2)
summary(mod.2)
formula2 = Y~Mstar+Mgas+ssfr_gas+ssfr_stars+baryon_fraction+spin+age_star_max+age_star_min+NH_10+f(redshift,model="ar1")
mod.2 = inla(formula2,data=data.2[,c(-1,-2)],family="binomial")
formula2 = Y~Mstar+Mgas+ssfr_gas+ssfr_stars+baryon_fraction+spin+age_star_max+age_star_min+NH_10+f(redshift,model="ar1")
mod.2 = inla(formula2,data=data.2,family="binomial")
summary(mod.2)
