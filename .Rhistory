N = nrow(GCS)
######## NB with errors ########################################################
MV_Tx = seq(from = 1.05 * min(GCS$MV_T),
to = 0.95 * max(GCS$MV_T),
length.out = 500)
jags.data <- list(
N_GC = GCS$N_GC,
MV_T = GCS$MV_T,
errN_GC = GCS$N_GC_err,
N = nrow(GCS),
err_MV_T = err_MV_T,
MV_Tx = MV_Tx,
M = 500
)
model.NB <- "model{
# Priors for regression coefficients
beta.0~dnorm(0,0.000001)
beta.1~dnorm(0,0.000001)
# Prior for size
size~dunif(0.001,5)
#
for (i in 1:N){
MV_T_true[i]~dunif(-26,-10)
}
# Likelihood function
for (i in 1:N){
MV_T[i]~dnorm(MV_T_true[i],1/err_MV_T[i]^2);
errorN[i]~dbin(0.5,2*errN_GC[i])
eta[i]<-beta.0+beta.1*MV_T_true[i]
#log(mu[i])<-max(-20,min(20,eta[i]))# Ensures that large beta values do not cause numerical problems.
log(mu[i])<-log(exp(eta[i])+errorN[i]-errN_GC[i])
p[i]<-size/(size+mu[i])
N_GC[i]~dnegbin(p[i],size)
# Prediction
etaTrue[i]<-beta.0+beta.1*MV_T_true[i]
log(muTrue[i])<-max(-20,min(20,etaTrue[i]))
pTrue[i]<-size/(size+muTrue[i])
prediction.NB[i]~dnegbin(pTrue[i],size)
#prediction.NB[i]~dnegbin(p[i],size)
# Discrepancy measures
YNew[i] ~ dnegbin(p[i],size)
expY[i] <- mu[i]
varY[i] <- mu[i] + pow(mu[i],2) / size
PRes[i] <-(N_GC[i] - expY[i])/sqrt(varY[i])
PResNew[i] <-(YNew[i] - expY[i])/sqrt(varY[i])
D[i]<-pow(PRes[i],2)
DNew[i]<-pow(PResNew[i],2)
}
Fit<-sum(D[1:N])
New<-sum(DNew[1:N])
# Prediction for new data
for (j in 1:M){
etax[j]<-beta.0+beta.1*MV_Tx[j]
log(mux[j])<-max(-20,min(20,etax[j]))
px[j]<-size/(size+mux[j])
prediction.NBx[j]~dnegbin(px[j],size)
}
}"
inits1 <- list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))
inits2 <- list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))
inits3 <- list(beta.0=rnorm(1,0,0.1),beta.1=rnorm(1,0,0.1),size=runif(1,0.1,5))
params <- c("beta.0","beta.1","size","PRes","MV_T_true","Fit","New","prediction.NBx")
#jags.neg <- jags.model(
#  data = jags.data,
#  inits = inits,
#  textConnection(model.NB),
#  n.chains = 3,
#  n.adapt=1000
#)
library(parallel)
cl <- makeCluster(3)
jags.neg <- run.jags(method="rjparallel", method.options=list(cl=cl),
data = jags.data,
inits = list(inits1,inits2,inits3),
model=model.NB,
n.chains = 3,
adapt=2000,
monitor=c(params),
burnin=20000,
sample=50000,
summarise=FALSE,
thin=5,
plots=FALSE
)
jagssamples.nb <- as.mcmc.list(jags.neg )
scale_fill_economist()+
)
Pred<-ggs(jagssamples.nb,family=c("New"))[,"value"]
Obs<-ggs(jagssamples.nb,family=c("Fit"))[,"value"]
sqrt(mean((Pred-Obs)^2))
# Dispersion parameter
require(scales)
Pres<-summary(as.mcmc.list(jags.neg, vars="PRes"),quantiles=0.5)$quantiles
Dipersion = sum(Pres^2)/(N-3)# beta.0, beta.1 and k, 3 parameters
Dipersion
jags.DIC <- jags.model(
data = jags.data,
inits = inits1,
textConnection(model.NB),
n.chains = 3,
n.adapt=2000
)
update(jags.DIC , 10000)
dicsamples.nb <- dic.samples(jags.DIC, params, n.iter = 25000,type="pD")
dicsamples.nb
975-25
995-5
citation(package = "rjags")
exp(2.19)
require(AMADA)
install_github("RafaelSdeSouza/AMADA")
require(devtools)
install_github("RafaelSdeSouza/AMADA")
require(AMADA)
require(AMADA)
corr<-Corr_MIC(SNIa,"pearson")
Fig1<-plotdendrogram(corr,"phylogram")
data("SNIa")
corr<-Corr_MIC(SNIa,"pearson")
Fig1<-plotdendrogram(corr,"phylogram")
install_github("RafaelSdeSouza/AMADA",dependencies=TRUE)
require(devtools)
install_github("RafaelSdeSouza/AMADA",dependencies=TRUE)
help("AMADA")
?AMADA
?"AMADA"
vignette("AMADA")
R CMD Rd2pdf AMADA
library(help="AMADA")
help("AMADA")
help(package="AMADA")
N = 10
M= 3
matrix(rnorm(N*M,mean=0,sd=1), N, M)
N = 100
M= 1000
M1<-matrix(rnorm(N*M,mean=0,sd=1), N, M)
M1
N = 10000
M= 1000
M1<-matrix(rnorm(N*M,mean=0,sd=1), N, M)
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"phylogram")
corr
Fig1<-plotdendrogram(corr,"fan")
N = 5000
M= 100
M1<-matrix(rnorm(N*M,mean=0,sd=1), N, M)
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"fan")
N = 5000
M= 500
M1<-matrix(rnorm(N*M,mean=0,sd=1), N, M)
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"fan")
N = 5000
M= 100
M1<-matrix(rnorm(N*M,mean=0,sd=1), N, M)
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"fan")
N = 50000
M= 100
M1<-matrix(rnorm(N*M,mean=0,sd=1), N, M)
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"fan")
N = 100000
M= 100
M1<-matrix(rnorm(N*M,mean=0,sd=1), N, M)
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"fan")
ptm <- proc.time()
corr<-Corr_MIC(M1,"pearson")
Fig1<-plotdendrogram(corr,"fan")
proc.time() - ptm
1.432+0.044
help(package="AMADA")
install.packages("GGally")
library("GGally", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
data(diamonds, package="ggplot2")
diamonds.samp <- diamonds[sample(1:dim(diamonds)[1],200),]
# Custom Example
pm <- ggpairs(
diamonds.samp[,1:3],
upper = list(continuous = "density", combo = "box"),
lower = list(continuous = "points", combo = "dot"),
color = "cut",
title = "Diamonds"
)
pm
pm <- ggpairs(
diamonds.samp[,1:3],
upper = list(continuous = "density", combo = "box"),
lower = list(continuous = "density", combo = "dot"),
color = "cut",
title = "Diamonds"
)
pm
ggpairs(
diamonds.samp[,1:3],
upper = list(continuous = "density", combo = "box"),
lower = list(continuous = "density"),
color = "cut",
title = "Diamonds"
)
ggpairs(
diamonds.samp[,1:3],
upper = list(continuous = "density"),
lower = list(continuous = "density"),
color = "cut",
title = "Diamonds"
)
ggpairs(
iris[,1:4],
upper = list(continuous = "density"),
lower = list(continuous = "density"),
color = "cut",
title = "Diamonds"
)
ggpairs(
iris[,1:4],
upper = list(continuous = "density"),
lower = list(continuous = "density")
)
ggpairs(
iris[,1:4],
upper = list(continuous = "cor"),
lower = list(continuous = "density")
)
pm <- ggpairs(
iris[,1:4],
upper = list(continuous = "cor"),
lower = list(continuous = "density"),
diag=list("density")
)
pm
ggpairs(
iris[,1:4],
upper = list(continuous = "cor"),
lower = list(continuous = "density"),
diag=list("bar'")
)
pm <- ggpairs(
iris[,1:4],
diag=list("bar"),
upper = list(continuous = "cor"),
lower = list(continuous = "density")
)
pm
pm <- ggpairs(
iris[,1:4],
diag=list("bar"),
upper = list(continuous = "cor"),
lower = list(continuous = "hist")
)
pm
pm <- ggpairs(
iris[,1:4],
diag=list("continuous"),
upper = list(continuous = "cor"),
lower = list(continuous = "density")
)
pm
install.packages("R1magic")
library(R1magic)#  Signal components
N <- 100
# Sparse components
K <- 4
#  Up to Measurements  > K LOG (N/K)
M <- 40
# Measurement Matrix (Random Sampling Sampling)
phi <- GaussianMatrix(N,M)
# R1magic generate random signal
xorg <- sparseSignal(N, K, nlev=1e-3)
y <- phi %*% xorg ;# generate measurement
T <- diag(N) ;# Do identity transform
p <- matrix(0, N, 1) ;# initial guess
# R1magic Convex Minimization ! (unoptimized-parameter)
ll <- solveL1(phi, y, T, p)
x1 <- ll$estimate
plot( 1:100, seq(0.011,1.1,0.011), type = “n”,xlab=””,ylab=””)
title(main=”Random Sparse Signal Recovery”,
xlab=”Signal Component”,ylab=”Spike Value”)
lines(1:100, xorg , col = “red”)
lines(1:100, x1, col = “blue”, cex = 1.5)
# shifted by 5 for clearity
library(R1magic)#  Signal components
N <- 100
# Sparse components
K <- 4
#  Up to Measurements  > K LOG (N/K)
M <- 40
# Measurement Matrix (Random Sampling Sampling)
phi <- GaussianMatrix(N,M)
# R1magic generate random signal
xorg <- sparseSignal(N, K, nlev=1e-3)
y <- phi %*% xorg ;# generate measurement
T <- diag(N) ;# Do identity transform
p <- matrix(0, N, 1) ;# initial guess
# R1magic Convex Minimization ! (unoptimized-parameter)
ll <- solveL1(phi, y, T, p)
x1 <- ll$estimate
plot( 1:100, seq(0.011,1.1,0.011), type = "n",xlab="",ylab="")
title(main="Random Sparse Signal Recovery",
xlab="Signal Component",ylab="Spike Value")
lines(1:100, xorg , col = "red")
lines(1:100, x1, col = “blue”, cex = 1.5)
# shifted by 5 for clearity
library(R1magic)#  Signal components
N <- 100
# Sparse components
K <- 4
#  Up to Measurements  > K LOG (N/K)
M <- 40
# Measurement Matrix (Random Sampling Sampling)
phi <- GaussianMatrix(N,M)
# R1magic generate random signal
xorg <- sparseSignal(N, K, nlev=1e-3)
y <- phi %*% xorg ;# generate measurement
T <- diag(N) ;# Do identity transform
p <- matrix(0, N, 1) ;# initial guess
# R1magic Convex Minimization ! (unoptimized-parameter)
ll <- solveL1(phi, y, T, p)
x1 <- ll$estimate
plot( 1:100, seq(0.011,1.1,0.011), type = "n",xlab="",ylab="")
title(main="Random Sparse Signal Recovery",
xlab="Signal Component",ylab="Spike Value")
lines(1:100, xorg , col = "red")
lines(1:100, x1, col = "blue", cex = 1.5)
xorg
x1
phi
y
diag(N)
matrix(0, N, 1)
5.226/2.760
1.893478*0.74
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Beta_regression")
#  JAGS script  Scape_Fraction.R
#  Copyright (C) 2015  Rafael S. de Souza
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License version 3 as published by
#the Free Software Foundation.
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#  A copy of the GNU General Public License is available at
#  http://www.r-project.org/Licenses/
#
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
require(caret)
require(pROC)
require(plyr)
#Read the  dataset
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
#trainIndex <- createDataPartition(data.1$redshift, p = .25,
#                                  list = FALSE,
#                                  times = 1)
data.2<-data.1[data.1$redshift<=10,]
#data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
# Prepare data for JAGS
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
fit=glm(Y~QHI+baryon_fraction,data=data.2,family=binomial("logit"))
predict(fit, type="response")
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC
fit=glm(Y~baryon_fraction,data=data.2,family=binomial("logit"))
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC
fit
library(popbio)
logi.hist.plot(data.2$baryon_fraction ,data.2$Y,boxp=F,type="hist",counts = T,col="gray",xlabel = expression(f[gas]),ylabel="Probability")
fit=glm(Y~spin,data=data.2,family=binomial("logit"))
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC<
data.2$spin
ROC
fit=glm(Y~age_star_mean,data=data.2,family=binomial("logit"))
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC
fit=glm(Y~Mvir,data=data.2,family=binomial("logit"))
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC
fit=glm(Y~Mvir+Mgas,data=data.2,family=binomial("logit"))
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC
fit
fit=glm(Y~Mvir+Mgas+QI,data=data.2,family=binomial("logit"))
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC
fit=glm(Y~Mvir+Mgas+QII,data=data.2,family=binomial("logit"))
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC
fit=glm(Y~Mvir+Mgas+QHI,data=data.2,family=binomial("logit"))
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC
fit=glm(Y~QHI,data=data.2,family=binomial("logit"))
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC
fit=glm(Y~QHI,data=data.2,family=binomial("logit"))
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC
fit=glm(Y~QHI,data=data.2,family=binomial("logit"))
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC
fit=glm(Y~baryon_fraction,data=data.2,family=binomial("logit"))
ROC<-roc(predict(fit, type="response"), data.2$Y)
ROC
require(LOGIT)
ROCtest(fit)
fit=glm(Y~QHI+baryon_fraction,data=data.2,family=binomial("logit"))
ROCtest(fit)
hlGOF.test(data.2$Y, predict(fit,data.2, type="response"), breaks=12)
fit=glm(Y~"Mvir","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10",data=data.2,family=binomial("logit"))
ROCtest(fit)
fit2=glm(Y~Mvir+baryon_fraction+age_star_mean+ssfr_gas,data=data.2,family=binomial("logit"))
ROCtest(fit2,10,"ROC")
fit2
fit2=glm(Y~redshift+Mvir+baryon_fraction+age_star_mean+ssfr_gas,data=data.2,family=binomial("logit"))
ROCtest(fit2,10,"ROC")
library(lme4)
library(nlme)
library(arm)
fit2=glmer(Y~Mvir+baryon_fraction+age_star_mean+ssfr_gas+(1|redshift),data=data.2,family=binomial("logit"))
fit2
ROCtest(fit2,10,"ROC")
predict(fit2,type=response)
predict(fit2,type="response")
roc(predict(fit2,type="response"), data.2$Y)
fit2=glmer(Y~Mvir+baryon_fraction+(1|redshift),data=data.2,family=binomial("logit"))
predict(fit2,type="response")
roc(predict(fit2,type="response"), data.2$Y)
fit2
glm(Y~Mvir+baryon_fraction,data=data.2,family=binomial("logit"))
require(gam)
fit2=gam(Y~Mvir+baryon_fraction,data=data.2,family=binomial("logit"))
roc(predict(fit2,type="response"), data.2$Y)
fit2
ROCtest(fit2,10,"ROC")
fit=glm(Y~Mvir+baryon_fraction,data=data.2,family=binomial("probit"))
ROCtest(fit,10,"ROC")
fit2=gam(Y~Mvir+baryon_fraction,data=data.2,family=binomial("logit"))
ROCtest(fit2,10,"ROC")
install.packages("gammSlice")
require(gammSlice)
fit2=gSlc(Y~s(Mvir)+s(baryon_fraction),data=data.2,family=binomial("logit"))
fit2
plot(fit2)
fit2=gam(Y~s(Mvir)+s(baryon_fraction),data=data.2,family=binomial("logit"))
plot(fit2)
plot(fit2)
plot(fit2)
vis.gam(fit2,type="response")
vis.gam(fit2,type="response",plot.type = "countour")
vis.gam(fit2,type="response",plot.type = "countour")
vis.gam(fit2,type="response",plot.type = "countour")
vis.gam(fit2,type="response",plot.type = "contour")
fit2=gam(Y~te(Mvir,baryon_fraction),data=data.2,family=binomial("logit"))
vis.gam(fit2,type="response",plot.type = "contour")
vis.gam(fit2,type="response",plot.type = "persp")
vis.gam(fit2,type="response",plot.type = "persp", border=NA, n.grid=500,theta=30,phi=30)
vis.gam(fit2,type="response",plot.type = "persp", border=NA, n.grid=500,theta=50,phi=30)
vis.gam(fit2,type="response",plot.type = "persp", border=NA, n.grid=500,theta=10,phi=30)
vis.gam(fit2,type="response",plot.type = "persp", border=NA, n.grid=500,theta=-10,phi=30)
vis.gam(fit2,type="response",plot.type = "persp", border=NA, n.grid=500,theta=-30,phi=30)
vis.gam(fit2,type="response",plot.type = "persp", border=NA, n.grid=500,theta=-60,phi=30)
logi.hist.plot(data.2$baryon_fraction ,data.2$Y,boxp=F,type="hist",counts = T,col="gray",xlabel = expression(f[gas]),ylabel="Probability")
logi.hist.plot(data.2$Mvir ,data.2$Y,boxp=F,type="hist",counts = T,col="gray",xlabel = expression(f[gas]),ylabel="Probability")
vis.gam(fit2,type="response",plot.type = "persp", border=NA, n.grid=500,theta=-60,phi=30)
fit2=gam(Y~s(Mvir)+s(baryon_fraction),data=data.2,family=binomial("logit"))
vis.gam(fit2,type="response",plot.type = "persp", border=NA, n.grid=500,theta=-60,phi=30)
fit2=gam(Y~te(QHI,baryon_fraction),data=data.2,family=binomial("logit"))
vis.gam(fit2,type="response",plot.type = "persp", border=NA, n.grid=500,theta=-60,phi=30)
vis.gam(fit2,type="response",plot.type = "persp",color="topo", border=NA, n.grid=500,theta=-60,phi=30)
vis.gam(fit2,type="response",plot.type = "persp",color="topo", n.grid=500,theta=-60,phi=30)
vis.gam(fit2,type="response",plot.type = "persp",color="topo", border=NA, n.grid=500,theta=-60,phi=30)
vis.gam(fit,type="response",plot.type = "persp",color="topo", border=NA, n.grid=500,theta=-60,phi=30)
fit=glm(Y~Mvir+baryon_fraction,data=data.2,family=binomial("probit"))
vis.gam(fit,type="response",plot.type = "persp",color="topo", border=NA, n.grid=500,theta=-60,phi=30)
