<<<<<<< Updated upstream
pm <- ggpairs(
iris[,1:4],
diag=list("bar"),
upper = list(continuous = "cor"),
lower = list(continuous = "hist")
=======
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Logit_Mar")
library(arm)
library(caret)
library(pROC)
require(plyr)
require(gam)
library(glmnet)
data<-read.csv("sample_agn.csv",header=TRUE,na.strings="")
data2<-na.omit(data)
data2<-data2[data2$logMstar>0,]
data2<-data2[which(data2$vlos_sigma!=Inf),]
#data2$bpt<-as.factor(data2$bpt)
data2$bpt <- revalue(data2$bpt,c("SF"="0","Composite"="0",
"LINER"="1","Seyfert/LINER"="1",
"Seyfert"="1","BLANK"="0"))
x<-as.matrix(data2[,2:5])
fit<-glmnet(x,y=data2$bpt,alpha=1,family="binomial")
plot(fit,xvar="lambda")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
cv.glmmod <- cv.glmnet(x,y=data2$bpt,alpha=1,family="binomial",type.measure = "class")
plot(cv.glmmod)
cv.glmmod <- cv.glmnet(x,y=data2$bpt,alpha=1,family="binomial",type.measure = "auc")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
best_lambda
cv.glmmod <- cv.glmnet(x,y=data2$bpt,alpha=1,family="binomial",type.measure = "class")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
best_lambda
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
active.min = which(coef.min != 0)
active.min
coef.min
coef.min[which(coef.min != 0)]
plot(fit, xvar = "dev", label = TRUE)
plot(fit,xvar="lambda",label = TRUE)
market.size <- 800
icecream$opportunity <- market.size - icecream$units
bin.glm <- glm(cbind(units, opportunity) ~ temp, data=icecream,
family=binomial(link = "logit"))
par(mfrow=c(2,2))
plot(bin.glm)
title(outer=TRUE, line = -1,
main = list("Binomial (logit) GLM",
cex=1.25,col="black", font=2))
meanProb <- predict(bin.glm, type="response")
meanPred <- meanProb*market.size
UpPred <- qbinom(.95, market.size, meanProb)
LwPred <- qbinom(.05, market.size, meanProb)
plotData <- lapply(
seq(along=icecream$temp),
function(i){
y = ylim[1]:ylim[2]
x = rep(icecream$temp[i], length(y))
z0 = rep(0, length(y))
z = dbinom(y, market.size, meanProb[i])
return(list(x=x, y=y, z0=z0, z=z))
}
)
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData,
main = "Binomial (logit) GLM")
glmModelPlot <- function(x, y, xlim,ylim, meanPred,  LwPred, UpPred,
plotData, main=NULL){
## Based on code by Arthur Charpentier:
## http://freakonometrics.hypotheses.org/9593
par(mfrow=c(1,1))
n <- 2
N <- length(meanPred)
zMax <- max(unlist(sapply(plotData, "[[", "z")))*1.5
mat <- persp(xlim, ylim, matrix(0, n, n), main=main,
zlim=c(0, zMax), theta=-30,
ticktype="detailed",box=FALSE)
C <- trans3d(x, UpPred, rep(0, N),mat)
lines(C, lty=2)
C <- trans3d(x, LwPred, rep(0, N), mat)
lines(C, lty=2)
C <- trans3d(c(x, rev(x)), c(UpPred, rev(LwPred)),
rep(0, 2*N), mat)
polygon(C, border=NA, col=adjustcolor("yellow", alpha.f = 0.5))
C <- trans3d(x, meanPred, rep(0, N), mat)
lines(C, lwd=2, col="grey")
C <- trans3d(x, y, rep(0,N), mat)
points(C, lwd=2, col="#00526D")
for(j in N:1){
xp <- plotData[[j]]$x
yp <- plotData[[j]]$y
z0 <- plotData[[j]]$z0
zp <- plotData[[j]]$z
C <- trans3d(c(xp, xp), c(yp, rev(yp)), c(zp, z0), mat)
polygon(C, border=NA, col="light blue", density=40)
C <- trans3d(xp, yp, z0, mat)
lines(C, lty=2)
C <- trans3d(xp, yp, zp, mat)
lines(C, col=adjustcolor("blue", alpha.f = 0.5))
}
}
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData,
main = "Binomial (logit) GLM")
meanPred <- predict(lin.mod, type="response")
sdgig <- sqrt(summary(lin.mod)$dispersion)
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData,
main = "Binomial (logit) GLM")
icecream <- data.frame(
temp=c(11.9, 14.2, 15.2, 16.4, 17.2, 18.1,
18.5, 19.4, 22.1, 22.6, 23.4, 25.1),
units=c(185L, 215L, 332L, 325L, 408L, 421L,
406L, 412L, 522L, 445L, 544L, 614L)
)
glmModelPlot <- function(x, y, xlim,ylim, meanPred,  LwPred, UpPred,
plotData, main=NULL){
## Based on code by Arthur Charpentier:
## http://freakonometrics.hypotheses.org/9593
par(mfrow=c(1,1))
n <- 2
N <- length(meanPred)
zMax <- max(unlist(sapply(plotData, "[[", "z")))*1.5
mat <- persp(xlim, ylim, matrix(0, n, n), main=main,
zlim=c(0, zMax), theta=-30,
ticktype="detailed",box=FALSE)
C <- trans3d(x, UpPred, rep(0, N),mat)
lines(C, lty=2)
C <- trans3d(x, LwPred, rep(0, N), mat)
lines(C, lty=2)
C <- trans3d(c(x, rev(x)), c(UpPred, rev(LwPred)),
rep(0, 2*N), mat)
polygon(C, border=NA, col=adjustcolor("yellow", alpha.f = 0.5))
C <- trans3d(x, meanPred, rep(0, N), mat)
lines(C, lwd=2, col="grey")
C <- trans3d(x, y, rep(0,N), mat)
points(C, lwd=2, col="#00526D")
for(j in N:1){
xp <- plotData[[j]]$x
yp <- plotData[[j]]$y
z0 <- plotData[[j]]$z0
zp <- plotData[[j]]$z
C <- trans3d(c(xp, xp), c(yp, rev(yp)), c(zp, z0), mat)
polygon(C, border=NA, col="light blue", density=40)
C <- trans3d(xp, yp, z0, mat)
lines(C, lty=2)
C <- trans3d(xp, yp, zp, mat)
lines(C, col=adjustcolor("blue", alpha.f = 0.5))
}
}
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData,
main = "Binomial (logit) GLM")
market.size <- 800
icecream$opportunity <- market.size - icecream$units
bin.glm <- glm(cbind(units, opportunity) ~ temp, data=icecream,
family=binomial(link = "logit"))
par(mfrow=c(2,2))
plot(bin.glm)
title(outer=TRUE, line = -1,
main = list("Binomial (logit) GLM",
cex=1.25,col="black", font=2))
meanProb <- predict(bin.glm, type="response")
meanPred <- meanProb*market.size
UpPred <- qbinom(.95, market.size, meanProb)
LwPred <- qbinom(.05, market.size, meanProb)
plotData <- lapply(
seq(along=icecream$temp),
function(i){
y = ylim[1]:ylim[2]
x = rep(icecream$temp[i], length(y))
z0 = rep(0, length(y))
z = dbinom(y, market.size, meanProb[i])
return(list(x=x, y=y, z0=z0, z=z))
}
>>>>>>> Stashed changes
)
glmModelPlot(x = icecream$temp, y=icecream$units,
xlim=xlim, ylim=ylim,
meanPred = meanPred, LwPred = LwPred,
UpPred = UpPred, plotData = plotData,
main = "Binomial (logit) GLM")
market.size <- 800
icecream$opportunity <- market.size - icecream$units
bin.glm <- glm(cbind(units, opportunity) ~ temp, data=icecream,
family=binomial(link = "logit"))
par(mfrow=c(2,2))
plot(bin.glm)
title(outer=TRUE, line = -1,
main = list("Binomial (logit) GLM",
cex=1.25,col="black", font=2))
meanProb <- predict(bin.glm, type="response")
meanPred <- meanProb*market.size
UpPred <- qbinom(.95, market.size, meanProb)
LwPred <- qbinom(.05, market.size, meanProb)
plotData <- lapply(
seq(along=icecream$temp),
function(i){
y = ylim[1]:ylim[2]
x = rep(icecream$temp[i], length(y))
z0 = rep(0, length(y))
z = dbinom(y, market.size, meanProb[i])
return(list(x=x, y=y, z0=z0, z=z))
}
)
data2[1,]
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
require(caret)
require(pROC)
require(plyr)
require(LOGIT)
#Read the  dataset
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
#trainIndex <- createDataPartition(data.1$redshift, p = .25,
#                                  list = FALSE,
#                                  times = 1)
data.2<-data.1[data.1$redshift<=10,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
# Prepare data for JAGS
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Beta_regression")
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
require(caret)
require(pROC)
require(plyr)
require(LOGIT)
#Read the  dataset
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
#trainIndex <- createDataPartition(data.1$redshift, p = .25,
#                                  list = FALSE,
#                                  times = 1)
data.2<-data.1[data.1$redshift<=10,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
# Prepare data for JAGS
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
data2[1,]
data.2[1,]
data.2[1,3:16]
x<-as.matrix(data.2[,3:16])
fit<-glmnet(x,y=data.2$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
cv.glmmod <- cv.glmnet(x,y=data2$bpt,alpha=1,family="binomial",type.measure = "class")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
active.min = coef.min[which(coef.min != 0)]
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=1,family="binomial",type.measure = "class")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
active.min = coef.min[which(coef.min != 0)]
coef.min
best_lambda
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=0.5,family="binomial",type.measure = "class")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
active.min = coef.min[which(coef.min != 0)]
active.min
coef.min
data.2<-data.1[data.1$redshift<=10,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
# Prepare data for JAGS
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
data.2$sfr_stars<-(data.2$sfr_stars-mean(data.2$sfr_stars))/sd(data.2$sfr_stars)
x<-as.matrix(data.2[,c("Mstar","Mgas","Mvir","sfr_gas","baryon_fraction","QHI","ssfr_gas","age_star_mean","spin","NH_10","sfr_stars")])
#fit=glm(Y~QHI+baryon_fraction+redshift,data=data.2,family=binomial("probit"))
fit<-glmnet(x,y=data.2$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=0.5,family="binomial",type.measure = "class")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
best_lambda
plot(fit, xvar = "dev", label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
plot(fit,xvar="lambda",label = TRUE)
ROCtest(fit,10,"ROC")
fit
coef.min
coef.min[which(coef.min != 0)]
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=0.5,family="binomial",type.measure = "auc")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
cor(data.2$QHI,data.2$sfr_stars)
x<-as.matrix(data.2[,c("Mstar","Mgas","Mvir","sfr_gas","baryon_fraction","QHI","ssfr_gas","age_star_mean","spin","NH_10")])
#fit=glm(Y~QHI+baryon_fraction+redshift,data=data.2,family=binomial("probit"))
fit<-glmnet(x,y=data.2$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=0.5,family="binomial",type.measure = "auc")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min
x
x<-as.matrix(data.2[,c("Mstar","Mgas","Mvir","sfr_gas","baryon_fraction","QHI","ssfr_gas","age_star_mean","spin","NH_10")])
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=0.5,family="binomial",type.measure = "auc")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
vifcor(x,th=0.9)
require(usdm)
install.packages("usdm")
vifcor(x,th=0.9)
require(usdm)
vifcor(x,th=0.9)
x<-as.matrix(data.2[,c("Mstar","Mvir","sfr_gas","baryon_fraction","QHI","ssfr_gas","age_star_mean","spin","NH_10")])
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=0.5,family="binomial",type.measure = "auc")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
x<-as.matrix(data.2[,c("Mstar","Mvir","sfr_gas","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10")])
vifcor(x,th=0.9)
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=0.5,family="binomial",type.measure = "auc")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
active.min = coef.min[which(coef.min > 0.05)]
active.min
active.min = coef.min[which(abs(coef.min) > 0.05)]
active.min
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=1,family="binomial",type.measure = "auc")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
ctive.min = coef.min[which(abs(coef.min) > 0.1)]
active.min = coef.min[which(abs(coef.min) > 0.1)]
active.min
exp(-1.68)
exp(0.0008)
exp(0.55)
exp(0.55)/(1-exp(0.55))
plot(cv.glmmod)
plot(fit, xvar = "dev", label = TRUE)
plot(fit,xvar="lambda",label = TRUE)
fit=glm(Y~Mstar+Mvir+baryon_fraction+ssfr_gas+age_star_mean+spin+NH_10,data=data.2,family=binomial("probit"))
ROCtest(fit,10,"ROC")
fit=glm(Y~Mstar+Mvir,data=data.2,family=binomial("probit"))
ROCtest(fit,10,"ROC")
<<<<<<< Updated upstream
fit
## Load the data
data(Tokyo)
summary(Tokyo)
## Define the model
formula = y ~ f(time, model="rw2", cyclic=TRUE, param=c(1,0.0001)) - 1
## The call to inla
result = inla(formula, family="binomial", Ntrials=n, data=Tokyo)
## Once more: the call to inla in verbose mode
result = inla(formula, family="binomial", Ntrials=n, data=Tokyo, verbose = TRUE)
## Summarise the results
summary(result)
## Plot the results
plot(result)
## Improve estimate of the hyperparameters
h = inla.hyperpar(result)
## Summarise improved estimates
summary(h)
## Plot improved estimates
plot(h)
str(mod.surg)
mydata <- as.data.frame(hyper$summary.random$agc)
ggplot(mydata) +
geom_line(aes(ID, `0.5quant`)) +
geom_line(aes(ID, `0.025quant`), linetype="dashed") +
geom_line(aes(ID, `0.975quant`), linetype="dashed")
mydata
as.data.frame(hyper$summary.random$agc)
hyper$summary.random
hyper
hyper$summary
str(hyper)
mod.surg$summary
str(mod.surg)
as.data.frame(mod.surg$marginals.fixed)
str(mod.surg)
require(arm)
fit=bayesglm(Y~QHI+baryon_fraction,data=data.2,family=binomial("logit"))
display(fit)
model.mcmc = MCMClogit(Y~sfr_gas,data=data.2,, mcmc=1000)
require(MCMCpack)
model.mcmc = MCMClogit(Y~sfr_gas,data=data.2,, mcmc=1000)
model.mcmc
plot(model.mcmc )
model.mcmc = MCMClogit(Y~QHI+baryon_fraction,data=data.2,, mcmc=5000)
plot(model.mcmc)
formula = Y~QHI+baryon_fraction+f(redshift,model="ar1")
mod.surg = inla(formula,data=data.2,family="binomial")
mod.surg
summary(mod.surg)
plot(mod.surg)
hyper = inla.hyperpar(mod.surg)
summary(hyper)
plot(hyper)
formula1 = Y~QHI+baryon_fraction+f(redshift,model="ar1")
mod.1 = inla(formula,data=data.2,family="binomial")
formula2 = Y~QHI+baryon_fraction
mod.2 = inla(formula,data=data.2,family="binomial")
summary(mod.1)
summary(mod.2)
formula1 = Y~QHI+baryon_fraction+f(redshift,model="ar1")
mod.1 = inla(formula1,data=data.2,family="binomial")
formula2 = Y~QHI+baryon_fraction
mod.2 = inla(formula2,data=data.2,family="binomial")
summary(mod.1)
summary(mod.2)
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Beta_regression")
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
require(caret)
require(pROC)
require(plyr)
require(LOGIT)
require(usdm)
#Read the  dataset
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
#trainIndex <- createDataPartition(data.1$redshift, p = .25,
#                                  list = FALSE,
#                                  times = 1)
data.2<-data.1[data.1$redshift<=10,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
vifcor(c("Mvir","sfr_gas","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10"),th=0.75)
require(usdm)
install.packages("usdm", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
require(usdm)
vifcor(data.2[,c("Mvir","sfr_gas","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10")],th=0.75)
require(AMADA)
x<-data.2[,c("Mvir","sfr_gas","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10")
]
cor<-Corr_MIC(x,"pearson")
plotgraph(cor)
vifcor(data.2[,c("Mvir","sfr_gas","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10")],th=0.7)
vifcor(data.2[,c("Mvir","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10")],th=0.7)
x<-data.2[,c("Mvir","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10")]
# Prepare data for JAGS
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
data.2$sfr_stars<-(data.2$sfr_stars-mean(data.2$sfr_stars))/sd(data.2$sfr_stars)
x2<-as.matrix(data.2[,c("Mvir","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10")])
fit<-glmnet(x,y=data.2$Y,alpha=1,family="binomial")
install.packages("glmnet", lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
fit<-glmnet(x,y=data.2$Y,alpha=1,family="binomial")
require(glmnet)
fit<-glmnet(x,y=data.2$Y,alpha=1,family="binomial")
fit<-glmnet(x2,y=data.2$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
cv.glmmod <- cv.glmnet(x2,y=data.2$Y,alpha=1,family="binomial",type.measure = "class")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
plot(cv.glmmod)
cv.glmmod <- cv.glmnet(x2,y=data.2$Y,alpha=1,family="binomial",type.measure = "auc")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
best_lambda
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
plot(fit, xvar = "dev", label = TRUE)
plot(fit,xvar="lambda",label = TRUE)
x2[1,]
plot(fit, xvar = "dev", label = TRUE)
data.2<-data.1[data.1$redshift<=12,]
data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.1]<-1
data.2$Y[data.2$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
vifcor(data.2[,c("Mvir","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10")],th=0.7)
x<-data.2[,c("Mvir","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10")]
# Prepare data for JAGS
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
data.2$sfr_stars<-(data.2$sfr_stars-mean(data.2$sfr_stars))/sd(data.2$sfr_stars)
x2<-as.matrix(data.2[,c("Mvir","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10")])
fit<-glmnet(x2,y=data.2$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
x2<-as.matrix(data.2[,c("redshift","Mvir","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10")])
#fit=glm(Y~QHI+baryon_fraction+redshift,data=data.2,family=binomial("probit"))
fit<-glmnet(x2,y=data.2$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
cv.glmmod <- cv.glmnet(x2,y=data.2$Y,alpha=1,family="binomial",type.measure = "auc")
=======
plot(cv.glmmod)
best_lambda
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=1,family="binomial",type.measure = "class")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
best_lambda
cv.glmmod <- cv.glmnet(x,y=data2$bpt,alpha=0.2,family="binomial",type.measure = "class")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=0.2,family="binomial",type.measure = "class")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=0,family="binomial",type.measure = "class")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
best_lambda
coef.min
active.min = coef.min[which(abs(coef.min) > 0.1)]
index.min = coef.min[active.min]
active.min
vifcor(x,th=0.8)
vifcor(x,th=0.75)
x<-as.matrix(data.2[,c("Mvir","sfr_gas","baryon_fraction","ssfr_gas","age_star_mean","spin","NH_10")])
cv.glmmod <- cv.glmnet(x,y=data.2$Y,alpha=1,family="binomial",type.measure = "class")
>>>>>>> Stashed changes
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
<<<<<<< Updated upstream
fit=glm(Y~redshift+Mstar+Mvir,data=data.2,family=binomial("probit"))
ROCtest(fit,10,"ROC")
=======
coef.min[which(abs(coef.min) > 0.1)]
>>>>>>> Stashed changes
