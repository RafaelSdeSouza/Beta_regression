pm
pm <- ggpairs(
iris[,1:4],
diag=list("bar"),
upper = list(continuous = "cor"),
lower = list(continuous = "hist")
)
pm
pm <- ggpairs(
iris[,1:4],
diag=list("continuous"),
upper = list(continuous = "cor"),
lower = list(continuous = "density")
)
pm
install.packages("R1magic")
library(R1magic)#  Signal components
N <- 100
# Sparse components
K <- 4
#  Up to Measurements  > K LOG (N/K)
M <- 40
# Measurement Matrix (Random Sampling Sampling)
phi <- GaussianMatrix(N,M)
# R1magic generate random signal
xorg <- sparseSignal(N, K, nlev=1e-3)
y <- phi %*% xorg ;# generate measurement
T <- diag(N) ;# Do identity transform
p <- matrix(0, N, 1) ;# initial guess
# R1magic Convex Minimization ! (unoptimized-parameter)
ll <- solveL1(phi, y, T, p)
x1 <- ll$estimate
plot( 1:100, seq(0.011,1.1,0.011), type = “n”,xlab=””,ylab=””)
title(main=”Random Sparse Signal Recovery”,
xlab=”Signal Component”,ylab=”Spike Value”)
lines(1:100, xorg , col = “red”)
lines(1:100, x1, col = “blue”, cex = 1.5)
# shifted by 5 for clearity
library(R1magic)#  Signal components
N <- 100
# Sparse components
K <- 4
#  Up to Measurements  > K LOG (N/K)
M <- 40
# Measurement Matrix (Random Sampling Sampling)
phi <- GaussianMatrix(N,M)
# R1magic generate random signal
xorg <- sparseSignal(N, K, nlev=1e-3)
y <- phi %*% xorg ;# generate measurement
T <- diag(N) ;# Do identity transform
p <- matrix(0, N, 1) ;# initial guess
# R1magic Convex Minimization ! (unoptimized-parameter)
ll <- solveL1(phi, y, T, p)
x1 <- ll$estimate
plot( 1:100, seq(0.011,1.1,0.011), type = "n",xlab="",ylab="")
title(main="Random Sparse Signal Recovery",
xlab="Signal Component",ylab="Spike Value")
lines(1:100, xorg , col = "red")
lines(1:100, x1, col = “blue”, cex = 1.5)
# shifted by 5 for clearity
library(R1magic)#  Signal components
N <- 100
# Sparse components
K <- 4
#  Up to Measurements  > K LOG (N/K)
M <- 40
# Measurement Matrix (Random Sampling Sampling)
phi <- GaussianMatrix(N,M)
# R1magic generate random signal
xorg <- sparseSignal(N, K, nlev=1e-3)
y <- phi %*% xorg ;# generate measurement
T <- diag(N) ;# Do identity transform
p <- matrix(0, N, 1) ;# initial guess
# R1magic Convex Minimization ! (unoptimized-parameter)
ll <- solveL1(phi, y, T, p)
x1 <- ll$estimate
plot( 1:100, seq(0.011,1.1,0.011), type = "n",xlab="",ylab="")
title(main="Random Sparse Signal Recovery",
xlab="Signal Component",ylab="Spike Value")
lines(1:100, xorg , col = "red")
lines(1:100, x1, col = "blue", cex = 1.5)
xorg
x1
phi
y
diag(N)
matrix(0, N, 1)
5.226/2.760
1.893478*0.74
setwd("~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/Beta_regression")
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
require(caret)
require(pROC)
require(plyr)
require(LOGIT)
require(usdm)
library(lme4)
library(nlme)
library(arm)
require(gam)
require(glmnet)
require(AMADA)
#Read the  dataset
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
#trainIndex <- createDataPartition(data.1$redshift, p = .25,
#                                  list = FALSE,
#                                  times = 1)
data.2<-data.1[data.1$redshift<=15,]
# Exploratory plot AMADA correlations
cor1<-Corr_MIC(data.2[,-2],method="pearson")
plotdendrogram(cor1,type="p")
vifcor(data.2[,c(-1,-2)],th=0.80)
#data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.5]<-1
data.2$Y[data.2$Y<0.5]<-0
#data.2$Y<-as.factor(data.2$Y)
# Prepare data
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$ssfr_stars<-(data.2$ssfr_stars-mean(data.2$ssfr_stars))/sd(data.2$ssfr_stars)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
data.2$sfr_stars<-(data.2$sfr_stars-mean(data.2$sfr_stars))/sd(data.2$sfr_stars)
data.2$age_star_max<-(data.2$age_star_max-mean(data.2$age_star_max))/sd(data.2$age_star_max)
data.2$age_star_min<-(data.2$age_star_min-mean(data.2$age_star_min))/sd(data.2$age_star_min)
x2<-as.matrix(data.2[,c("Mstar","Mgas","ssfr_gas","ssfr_stars","baryon_fraction","spin","age_star_max","age_star_min","NH_10")])
hist(data.1[,"Mvir"])
hist(log(data.1[,"Mvir"],10))
hist(data.2$Mvir)
min(data.2$Mvir)
max(data.2$Mvir)
hist(log(data.1[,"Mgas"],10))
hist(log(data.1[,"Mstar"],10))
min(data.1[,"Mstar"])
min(data.1[,"Mgas"])
min(data.1[,"Mvir"])
data.1$Mvir<-log(data.1$Mvir,10)
data.1$Mstar<-log(data.1$Mstar,10)
data.1$Mgas<-log(data.1$Mgas,10)
#trainIndex <- createDataPartition(data.1$redshift, p = .25,
#                                  list = FALSE,
#                                  times = 1)
data.2<-data.1[data.1$redshift<=15,]
cor1<-Corr_MIC(data.2[,-2],method="pearson")
plotdendrogram(cor1,type="p")
vifcor(data.2[,c(-1,-2)],th=0.80)
vifcor(data.2[,c(-1,-2)],th=0.75)
vifcor(data.2[,c(-1,-2)],th=0.7)
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.5]<-1
data.2$Y[data.2$Y<0.5]<-0
#data.2$Y<-as.factor(data.2$Y)
# Prepare data
data.2$Mstar<-(data.2$Mstar-mean(data.2$Mstar))/sd(data.2$Mstar)
data.2$Mgas<-(data.2$Mgas-mean(data.2$Mgas))/sd(data.2$Mgas)
data.2$Mvir<-(data.2$Mvir-mean(data.2$Mvir))/sd(data.2$Mvir)
data.2$sfr_gas<-(data.2$sfr_gas-mean(data.2$sfr_gas))/sd(data.2$sfr_gas)
data.2$ssfr_stars<-(data.2$ssfr_stars-mean(data.2$ssfr_stars))/sd(data.2$ssfr_stars)
data.2$baryon_fraction<-(data.2$baryon_fraction-mean(data.2$baryon_fraction))/sd(data.2$baryon_fraction)
data.2$QHI<-(data.2$QHI-mean(data.2$QHI))/sd(data.2$QHI)
data.2$ssfr_gas<-(data.2$ssfr_gas-mean(data.2$ssfr_gas))/sd(data.2$ssfr_gas)
data.2$age_star_mean<-(data.2$age_star_mean-mean(data.2$age_star_mean))/sd(data.2$age_star_mean)
data.2$spin<-(data.2$spin-mean(data.2$spin))/sd(data.2$spin)
data.2$NH_10<-(data.2$NH_10-mean(data.2$NH_10))/sd(data.2$NH_10)
data.2$sfr_stars<-(data.2$sfr_stars-mean(data.2$sfr_stars))/sd(data.2$sfr_stars)
data.2$age_star_max<-(data.2$age_star_max-mean(data.2$age_star_max))/sd(data.2$age_star_max)
data.2$age_star_min<-(data.2$age_star_min-mean(data.2$age_star_min))/sd(data.2$age_star_min)
x2<-as.matrix(data.2[,c("Mstar","Mgas","ssfr_gas","ssfr_stars","baryon_fraction","spin","age_star_max","age_star_min","NH_10")])
fit<-glmnet(x2,y=data.2$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
cv.glmmod <- cv.glmnet(x2,y=data.2$Y,alpha=1,family="binomial",type.measure = "auc")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.min")
coef.min
exp(0.17)/(1+exp(0.17))
exp(1)/(1+exp(1))
exp(-0.81)/(1+exp(-0.81))
plot(fit, xvar = "dev", label = TRUE)
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
best_lambda
coef(cv.glmmod, s = "lambda.min")
coef.min = coef(cv.glmmod, s = "lambda.1se")
coef.min
fit=glm(Y~Mgas +ssfr_stars+age_star_min ,data=data.2,family=binomial("probit"))
ROCtest(fit,10,"ROC")
fit2=gam(Y~te(Mgas,ssfr_stars,age_star_min),data=data.2,family=binomial("logit"))
plot(fit2)
require(mgcv)
fit2=gam(Y~te(Mgas,ssfr_stars,age_star_min),data=data.2,family=binomial("logit"))
plot(fit2)
fit2
vis.gam(fit2,type="response",plot.type = "persp",color="topo", border=NA, n.grid=500,theta=-60,phi=30)
fit2=gam(Y~te(Mgas,ssfr_stars),data=data.2,family=binomial("logit"))
vis.gam(fit2,type="response",plot.type = "persp",color="topo", border=NA, n.grid=500,theta=-60,phi=30)
cv.glmmod <- cv.glmnet(x2,y=data.2$Y,alpha=1,type="cov",family="binomial",type.measure = "auc")
plot(cv.glmmod)
fit<-glmnet(x2,y=data.2$Y,alpha=1,family="binomial",type="cov")
cv.glmmod <- cv.glmnet(x2,y=data.2$Y,alpha=0.5,family="binomial",type.measure = "auc")
plot(cv.glmmod)
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.1se")
coef.min
cv.glmmod
plot(cv.glmmod,xlab="oi")
plot(cv.glmmod,xlab=expression(log~lambda))
plot(cv.glmmod,xlab=expression(log~Lambda))
plot(cv.glmmod,xlab=expression(log~lambda))
#Read the  dataset
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
data.1$Mvir<-log(data.1$Mvir,10)
data.1$Mstar<-log(data.1$Mstar,10)
data.1$Mgas<-log(data.1$Mgas,10)
#trainIndex <- createDataPartition(data.1$redshift, p = .25,
#                                  list = FALSE,
#                                  times = 1)
data.2<-data.1[data.1$redshift<=15,]
# Exploratory plot AMADA correlations
cor1<-Corr_MIC(data.2[,-2],method="pearson")
plotdendrogram(cor1,type="p")
vifcor(data.2[,c(-1,-2)],th=0.7)
#data.2<-data.1[trainIndex,]
#data.2<-data.1[data.1$redshift==8.86815,]
#data.2<-data.1
N<-nrow(data.2)
data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.2$Y[data.2$Y>=0.5]<-1
data.2$Y[data.2$Y<0.5]<-0
#data.2$Y<-as.factor(data.2$Y)
data.2[1,]
cor1<-Corr_MIC(data.2[,-2],method="pearson")
plotdendrogram(cor1,type="p")
vifcor(data.2[,c(-1,-2)],th=0.7)
vifcor(data.2[,c(-1,-2)],th=0.85)
vifcor(data.2[,c(-1,-2)],th=0.7
)
vifcor(data.2[,c(-1,-2)],th=0.8)
data.2<-data.1[data.1$redshift<=15,]
# Exploratory plot AMADA correlations
cor1<-Corr_MIC(data.2[,-2],method="pearson")
plotdendrogram(cor1,type="p")
vifcor(data.2[,c(-1,-2)],th=0.8)
vifcor(data.2[,c(-1,-2)],th=0.7)
data.2<-data.1[data.1$redshift<=20,]
# Exploratory plot AMADA correlations
cor1<-Corr_MIC(data.2[,-2],method="pearson")
plotdendrogram(cor1,type="p")
vifcor(data.2[,c(-1,-2)],th=0.7)
#Read the  dataset
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
data.1$Mvir<-log(data.1$Mvir,10)
data.1$Mstar<-log(data.1$Mstar,10)
data.1$Mgas<-log(data.1$Mgas,10)
#trainIndex <- createDataPartition(data.1$redshift, p = .25,
#                                  list = FALSE,
#                                  times = 1)
data.2<-data.1[data.1$redshift<=20,]
# Exploratory plot AMADA correlations
cor1<-Corr_MIC(data.2[,-2],method="pearson")
plotdendrogram(cor1,type="p")
vifcor(data.2[,c(-1,-2)],th=0.7)
VIF<-vifcor(data.2[,c(-1,-2)],th=0.7)
VIF
str(VIF)
VIF$excluted
VIF$excluded
VIF$Variables
VIF[]
VIF[1]
VIF[[1]]
VIF[1,1]
results(VIF)
mode(VIF)
VIF@results
VIF@results$Variables
remained<-c(VIF@results$Variables)
remained
VIF@results$Variables
levels(VIF@results$Variables)
remained<-levels(VIF@results$Variables)
remained
remained[1]
remained[2]
data.2[,remained]
data.2[1,remained]
scale(data.2[,remained])
as.data.frame(scale(data.2[,remained]))
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
require(caret)
require(pROC)
require(plyr)
require(LOGIT)
require(usdm)
library(lme4)
library(nlme)
library(arm)
require(gam)
require(glmnet)
require(AMADA)
require(mgcv)
#Read the  dataset
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
data.1$Mvir<-log(data.1$Mvir,10)
data.1$Mstar<-log(data.1$Mstar,10)
data.1$Mgas<-log(data.1$Mgas,10)
#trainIndex <- createDataPartition(data.1$redshift, p = .25,
#                                  list = FALSE,
#                                  times = 1)
data.2<-data.1[data.1$redshift<=20,]
VIF<-vifcor(data.2[,c(-1,-2)],th=0.7)
remained<-levels(VIF@results$Variables)
data3<-as.data.frame(scale(data.2[,remained]))
#data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.3$Y[data.2$Y>=0.1]<-1
data.3$Y[data.2$Y<0.1]<-0
data.3<-as.data.frame(scale(data.2[,remained]))
#data.2$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.3$Y[data.2$Y>=0.1]<-1
data.3$Y[data.2$Y<0.1]<-0
N<-nrow(data.2)
data.3$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.3$Y[data.3$Y>=0.1]<-1
data.3$Y[data.3$Y<0.1]<-0
x2<-as.matrix(data3)
fit<-glmnet(x2,y=data.2$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
x2<-as.matrix(data.3)
data.3[1,]
remain<-levels(VIF@results$Variables)
data.3<-as.data.frame(scale(data.2[,remain]))
N<-nrow(data.2)
data.3$Y<-(data.2$fEsc*(N-1)+0.5)/N
data.3$Y[data.3$Y>=0.1]<-1
data.3$Y[data.3$Y<0.1]<-0
#data.2$Y<-as.factor(data.2$Y)
# Fit LASSO binomial regression
x2<-as.matrix(data.3[,remain])
fit<-glmnet(x2,y=data.3$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
cv.glmmod <- cv.glmnet(x2,y=data.2$Y,alpha=0.5,family="binomial",type.measure = "auc")
plot(cv.glmmod,xlab=expression(log~lambda))
cv.glmmod <- cv.glmnet(x2,y=data.3$Y,alpha=0.5,family="binomial",type.measure = "auc")
plot(cv.glmmod,xlab=expression(log~lambda))
coef.min = coef(cv.glmmod, s = "lambda.1se")
coef.min
#  Required libraries
library(rjags)
library(ggmcmc)
library(ggplot2)
library(ggthemes)
library(pander)
library(Cairo)
library(plyr)
library(MASS)
library(scales)
library(plyr)
require(gdata)
require(runjags)
require(gdata)
require(caret)
require(pROC)
require(plyr)
require(LOGIT)
require(usdm)
library(lme4)
library(nlme)
library(arm)
require(gam)
require(glmnet)
require(AMADA)
require(mgcv)
#Read the  dataset
data.1= read.table(file="FiBY_escape_data_all.dat",header=FALSE)
colnames(data.1)<-c("redshift","fEsc","Mvir","Mstar","Mgas","QHI","sfr_gas",
"sfr_stars","ssfr_gas","ssfr_stars","baryon_fraction",
"spin","age_star_mean","age_star_max","age_star_min","NH_10")
data.1$Mvir<-log(data.1$Mvir,10)
data.1$Mstar<-log(data.1$Mstar,10)
data.1$Mgas<-log(data.1$Mgas,10)
#trainIndex <- createDataPartition(data.1$redshift, p = .25,
#                                  list = FALSE,
#                                  times = 1)
data.2<-data.1[data.1$redshift<=20,]
# Exploratory plot AMADA correlations
#cor1<-Corr_MIC(data.2[,-2],method="pearson")
#plotdendrogram(cor1,type="p")
# remove collinearity
VIF<-vifcor(data.2[,c(-1,-2)],th=0.7)
remain<-levels(VIF@results$Variables)
data.3<-as.data.frame(scale(data.2[,remain]))
N<-nrow(data.2)
data.3$Y<-(data.2$fEsc*(N-1)+0.5)/N
# Reionization cutoff
cut<-0.5
data.3$Y[data.3$Y>=cut]<-1
data.3$Y[data.3$Y<cut]<-0
#data.2$Y<-as.factor(data.2$Y)
# Fit LASSO binomial regression
x2<-as.matrix(data.3[,remain])
fit<-glmnet(x2,y=data.3$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
cv.glmmod <- cv.glmnet(x2,y=data.3$Y,alpha=0.5,family="binomial",type.measure = "auc")
plot(cv.glmmod,xlab=expression(log~lambda))
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.1se")
coef.min
VIF<-vifcor(data.2[,c(-1,-2)],th=0.9)
remain<-levels(VIF@results$Variables)
data.3<-as.data.frame(scale(data.2[,remain]))
N<-nrow(data.2)
data.3$Y<-(data.2$fEsc*(N-1)+0.5)/N
# Reionization cutoff
cut<-0.5
data.3$Y[data.3$Y>=cut]<-1
data.3$Y[data.3$Y<cut]<-0
#data.2$Y<-as.factor(data.2$Y)
# Fit LASSO binomial regression
x2<-as.matrix(data.3[,remain])
fit<-glmnet(x2,y=data.3$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
cv.glmmod <- cv.glmnet(x2,y=data.3$Y,alpha=0.5,family="binomial",type.measure = "auc")
plot(cv.glmmod,xlab=expression(log~lambda))
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.1se")
coef.min
cv.glmmod <- cv.glmnet(x2,y=data.3$Y,alpha=1,family="binomial",type.measure = "auc")
plot(cv.glmmod,xlab=expression(log~lambda))
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.1se")
coef.min
VIF<-vifcor(data.2[,c(-1,-2)],th=0.7)
remain<-levels(VIF@results$Variables)
data.3<-as.data.frame(scale(data.2[,remain]))
N<-nrow(data.2)
data.3$Y<-(data.2$fEsc*(N-1)+0.5)/N
# Reionization cutoff
cut<-0.5
data.3$Y[data.3$Y>=cut]<-1
data.3$Y[data.3$Y<cut]<-0
#data.2$Y<-as.factor(data.2$Y)
# Fit LASSO binomial regression
x2<-as.matrix(data.3[,remain])
fit<-glmnet(x2,y=data.3$Y,alpha=1,family="binomial")
plot(fit,xvar="lambda",label = TRUE)
plot(fit, xvar = "dev", label = TRUE)
cv.glmmod <- cv.glmnet(x2,y=data.3$Y,alpha=1,family="binomial",type.measure = "auc")
plot(cv.glmmod,xlab=expression(log~lambda))
best_lambda <- cv.glmmod$lambda.min
coef.min = coef(cv.glmmod, s = "lambda.1se")
coef.min
coef.min
str(coef.min)
plot(cv.glmmod,xlab=expression(log~lambda),family="serif")
plot(cv.glmmod,xlab=expression(log~lambda),family="symbol")
plot(cv.glmmod,xlab=expression(log~lambda),family="sans")
plot(cv.glmmod,xlab=expression(log~lambda),family="mono")
plot(cv.glmmod,xlab=expression(log~lambda),family="serif")
